
export DOTFILES="$HOME/src/bobwhitelock/dotfiles"
export ZSH_DIR="$DOTFILES/zsh"
source "$ZSH_DIR/env.sh"

# Oh My Zsh stuff.
ZSH_THEME="bob"
CASE_SENSITIVE="true" # Use case-sensitive completion.
DISABLE_AUTO_UPDATE="true" # Don't nag about updates.
plugins=(\
  aws \
  bundler \
  django \
  history-substring-search \
  httpie \
  rust \
  shrink-path \
  tmuxinator \
  vagrant \
  yarn \
  )
export ZSH=$DOTFILES/oh-my-zsh
source $ZSH/oh-my-zsh.sh
unalias -m '*' # Get rid of Oh my Zsh aliases polluting shell.

# Disable Software Flow Control for when I accidentally hit C-s.
# (see http://unix.stackexchange.com/a/72092).
stty -ixon

# Don't need `r` command.
disable r

# Check existence of setxkbmap so doesn't break without X.
# TODO Doesn't actually work, get message about cannot open display default
# display; is $DISPLAY set, on machine with X but not available
command -v setxkbmap >/dev/null 2>&1
if [ $? ]; then
  # Ensure correct keyboard layout.
  setxkbmap gb
fi

unsetopt share_history

# Allow interactive comments and alt-#, as in bash.
setopt interactive_comments
bindkey -M emacs '\e#' pound-insert

# Make ctrl-z run fg as well as backgrounding
# (from http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/).
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

bindkey '^B' backward-word
bindkey '^F' forward-word

# Let Vim interpret keys which would be interpreted by the terminal otherwise
# (see http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files).
stty stop '' -ixoff
ttyctl -f

# Load completions.
fpath=("$ZSH_DIR/completions" $fpath)
autoload -Uz compinit bashcompinit
compinit
bashcompinit

source /etc/bash_completion.d/compleat_setup

# For advanced shell history - disabled for now as messes up environment.
# export ASH_LOG_BIN=/usr/local/bin/_ash_log.py
# source /usr/lib/advanced_shell_history/zsh
# unset ASH_CFG_MOTD # Don't show message at shell start.

# Start ssh-agent and share this between shells. From
# https://unix.stackexchange.com/a/217223/229081.
if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock

# Enable thefuck.
command -v thefuck >/dev/null 2>&1 && eval "$(thefuck --alias)"

# Load NVM.
[ -s /usr/share/nvm/init-nvm.sh ] && source /usr/share/nvm/init-nvm.sh

# Have NVM automatically use `.nvmrc` if present - from
# https://github.com/nvm-sh/nvm#deeper-shell-integration.
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Enable FZF.
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Load Poetry (for Python package management).
[ -f ~/.poetry/env ] && source ~/.poetry/env

# Source script to set up all Zsh packages.
source "$ZSH_DIR/packages.sh"

# Source this again to set up things depending on earlier parts of this file,
# e.g. on aliases, and ensure no variables are mysteriously clobbered.
source "$ZSH_DIR/env.sh"

# Enable Pyenv.
command -v pyenv >/dev/null 2>&1 && eval "$(pyenv init -)"

# Enable Rbenv.
# XXX or could use omz plugin, for this and pyenv
command -v rbenv >/dev/null 2>&1 && eval "$(rbenv init -)"

# OPAM configuration
. /home/bob/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# Source all other custom Zsh files. Do this at the end so any other
# environment setup from above has happened before any custom setup of this
# environment from these files (e.g. Pyenv has been enabled and so the correct
# Python version will automatically be used, prior to one of these files
# attempting to do something in this environment such as sourcing a
# virtualenv).
source_libs() {
    # XXX conditionally load private files?
    for file in "$ZSH_PRIVATE_LIB"/* "$ZSH_LIB/"*; do
        # shellcheck disable=SC1090
        source "$file"
    done
}
source_libs
