
snippet suite
from common.tests.utils import TestCase


class $1Test(TestCase):
    def setUp(self):
        pass

    def test_$2(self):
        pass
endsnippet

# Print names and values of all members (i.e. properties and methods) of an
# object.
snippet inspect
import inspect
for name, value in inspect.getmembers($1):
    print("{}: {}".format(name, value))
endsnippet

# Dump object as JSON to file with corresponding name.
snippet json
import sys
import os

sys.path.append(f"{os.environ['DOTFILES']}/lib")
import lenient_json
lenient_json.dump($1, '$1.json')
endsnippet

snippet raise
raise RuntimeError($1)
endsnippet

snippet trace
raise RuntimeError($1)
endsnippet

# Can change this to just `breakpoint()` once using Python 3.7+ everywhere.
snippet debug
import ipdb
ipdb.set_trace()
endsnippet

snippet skip
from unittest import skip

@skip('$1')
endsnippet

snippet fail
self.assertTrue(False)
endsnippet

snippet super
super().$1(*args, **kwargs)
endsnippet

snippet logger
import logging
logger = logging.getLogger(__name__)
endsnippet

# Just the renaming part of deprecating a field, will still also need a
# migration operation setting `db_column` and making the column nullable, if
# needed, but this can be autogenerated and then just need to change `AddField`
# -> `AlterField`.
snippet deprecate
migrations.SeparateDatabaseAndState(
    state_operations=[
        migrations.RenameField(
            model_name='$1',
            old_name='$2',
            new_name='_$2',
        ),
    ]
),
migrations.AlterField(
endsnippet
