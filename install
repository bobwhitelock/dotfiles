#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# XXX want to automatically handle setting up Gem and Ruby ctags:
# - see https://thoughtbot.com/upcase/videos/intelligent-navigation-with-ctags
#
# - https://github.com/tpope/rbenv-ctags and things linked from there
# mkdir -p ~/.rbenv/plugins
# git clone git://github.com/tpope/rbenv-ctags.git \
  # ~/.rbenv/plugins/rbenv-ctags
# rbenv ctags
#
# - https://github.com/tpope/gem-ctags
# gem install gem-ctags
# gem ctags

main() {
  # Request `sudo` access pre-emptively, so password isn't re-prompted for at
  # some arbitrary time for later uses of `sudo`.
  sudo true

  cd "${BASEDIR}"

  # Copy example private environment variables file (if needed), so these can
  # be set but not committed.
  if [ ! -f zsh/env.private.sh ]; then
    header 'Copying private environment variables file'
    run cp zsh/env.private.{example.,}sh
  fi

  set +u
  # shellcheck disable=SC1091
  run source 'zsh/env.sh'
  set -u

  header 'Linking other needed files'
  link_files

  header 'Installing dependencies'
  install_dependencies

  header 'Installing dotfiles'
  run bin/sync_dotbot

  # header 'Configuring fonts'
  # configure_fonts

  header 'Setting up Vim'
  setup_vim

  header 'Setting up Tmux'
  run ~/.tmux/plugins/tpm/bin/install_plugins

  header 'Tweaking system files'
  tweak_system_files

  # header 'Enabling services'
  # enable_services
}

install_dependencies() {
  run git submodule update --init --recursive

  # TODO Install each dependency via independent call, so changes for earlier
  # packages still committed when later install fails?
  # XXX Obsolete, was for Arch.
  # run 'xargs sudo pacman -S --noconfirm --needed < dependencies/pacman'
  # run 'xargs yay -S --noconfirm --noredownload --norebuild < dependencies/aur'

  # XXX Should all these be installed - could break things?
  run yarn global add elm elm-format@exp create-elm-app elm-oracle elm-test prettier

  # Required for `interactive.singleKey` Git option.
  # XXX On last install, cpan required configuration but could do this
  # automatically by typing `yes` - automate this?
  run sudo cpan Term::ReadKey

  run sudo pip install autopep8 ipdb grip pgcli

  # Need `rbenv shell system` so Tmuxinator is installed for system Ruby, and
  # need to do this via `zsh -ic` so this is done in an interactive shell and
  # therefore `rbenv` is initialized correctly.
  # XXX Doesn't actually work; fix.
  # run 'zsh -ic "rbenv shell system && gem install tmuxinator"'
}

configure_fonts() {
  # Adapted from
  # https://dev.to/darksmile92/get-emojis-working-on-arch-linux-with-noto-fonts-emoji-2a9.

  # XXX This doesn't work, but manually creating file with this did
  run sudo echo "<?xml version=\"1.0\"?>
  <!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">
  <fontconfig>
   <alias>
     <family>sans-serif</family>
     <prefer>
       <family>Noto Sans</family>
       <family>Noto Color Emoji</family>
       <family>Noto Emoji</family>
       <family>DejaVu Sans</family>
     </prefer>
   </alias>

   <alias>
     <family>serif</family>
     <prefer>
       <family>Noto Serif</family>
       <family>Noto Color Emoji</family>
       <family>Noto Emoji</family>
       <family>DejaVu Serif</family>
     </prefer>
   </alias>

   <alias>
    <family>monospace</family>
    <prefer>
      <family>Noto Mono</family>
      <family>Noto Color Emoji</family>
      <family>Noto Emoji</family>
      <family>DejaVu Sans Mono</family>
     </prefer>
   </alias>
  </fontconfig>
  " > /etc/fonts/local.conf

  # Update font cache.
  run fc-cache
}

setup_vim() {
  run mkdir -p vim/{session,undodir,view}
  run "vim +':PlugClean | :PlugInstall | :PlugUpdate | :qa!'"
  run 'cd ~/.config/coc/extensions && yarn install'
}

link_files() {
  # XXX Move doing all this into `install.conf.yaml`?

  # XXX Disabled for now as no longer using Dropbox, need to copy these over
  # manually for now.
  # run ln -sf "$DROP"/.aws ~
  # run ln -sf "$DROP"/.ssh/ ~
  # run ln -sf "$DROP"/vim/spell/ ~/.vim

  # Link files in to `/etc`; cannot occur via `dotbot` as this doesn't
  # support linking as root (see
  # https://github.com/anishathalye/dotbot/issues/125).
  # XXX Obsolete, was for Arch.
  # run sudo mkdir -p /etc/interception/
  # run sudo ln -sf "$DOTFILES"/etc/udevmon.yaml /etc/interception/
  # run sudo ln -sf "$DOTFILES"/etc/pacman.conf /etc/pacman.conf

  # Primarily so `etckeeper` (which runs as `root`) uses my Git config.
  run sudo ln -sf ~bob/.gitconfig ~root
}

tweak_system_files() {
  # It's possible a global, system Zshrc will exist (possibly due to updating
  # system and an updated version of this also being updated); move this out
  # the way if so, so it doesn't interfere with my own config.
  if [ -f /etc/zsh/zshrc ]; then
    run sudo mv -f /etc/zsh/zshrc{,.bak}
  fi

  # Make this from `git-extras` non-executable, so own alias takes precedence.
  # XXX `git-extras` is not currently installed.
  # run sudo chmod -x /usr/bin/git-touch
}

# XXX Obsolete, was for Arch (using "Gnome tweaks" for same effect on Ubuntu
# now and working well).
# enable_services() {
#   run sudo systemctl enable --now udevmon
# }

header() {
  echo
  echo
  # shellcheck disable=SC2001
  echo "$@" | sed 's/^/======> /'
}

# Duplicated in `bin/sync`.
run() {
  echo
  echo '>' "$@"
  eval "$@" 2>&1 | indent
}

indent() {
  sed 's/^/       /'
}

main "$@"
