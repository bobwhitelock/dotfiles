#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Clone a GitHub repo into standard directory structure, then create Tmux
# window for new repo. Just open existing repo if already previously cloned.

# Test cases:
# `clone https://github.com/junegunn/fzf`     -> `$SRC/junegunn/fzf`
# `clone https://github.com/junegunn/fzf.vim` -> `$SRC/junegunn/fzf.vim`
# `clone git@github.com:junegunn/fzf.git`     -> `$SRC/junegunn/fzf`
# `clone git@github.com:junegunn/fzf.vim.git` -> `$SRC/junegunn/fzf.vim`
# `clone junegunn/fzf`                        -> `$SRC/junegunn/fzf`
# `clone junegunn/fzf.vim`                    -> `$SRC/junegunn/fzf.vim`

main() {
    local repo_identifier owner base_name name repo owner_path

    # Can be URL or just `owner/name`.
    repo_identifier="$1"

    # Extract `owner` and `name` from URLs/repo identifiers in any of the
    # following forms (including when name itself includes a `.`):
    # - https://github.com/owner/name
    # - git@github.com:owner/name.git
    # - owner/name
    owner="$(basename "$(dirname "$repo_identifier")" | awk -F: '{ print $NF }')"
    base_name="$(basename "$repo_identifier")"
    name="${base_name%.git}"

    # Standardize repo name so `hub` can figure out method should use to clone;
    # avoids being unnecessarily prompted for password.
    repo="$owner/$name"

    owner_path="$SRC/$owner"
    mkdir -p "$owner_path"
    cd "$owner_path"

    if [ ! -d "$name" ]; then
        gh repo clone "$repo"
    fi

    # shellcheck disable=SC1090
    source "$ZSH_LIB/tmux.sh"
    add_window --vim-pane "$name"
}

main "$@"
