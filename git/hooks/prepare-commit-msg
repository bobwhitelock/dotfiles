#!/usr/bin/env python3

import sys
import os
import subprocess
import os
from pathlib import Path

CO_AUTHOR_LINE = "Co-authored-by: Bob Whitelock <bob@rescale.com>"
RESCALE_DIR = Path(os.getenv("RESCALE_SRC", "")).resolve()


def is_in_rescale_repo():
    if not RESCALE_DIR:
        return False
    try:
        toplevel = Path(
            subprocess.check_output(["git", "rev-parse", "--show-toplevel"], text=True)
        ).resolve()
        return toplevel.parent == RESCALE_DIR
    except subprocess.CalledProcessError:
        return False


def main():
    if len(sys.argv) < 2:
        sys.exit(1)

    # Run local hook if it exists
    local_hook = Path(".git/hooks/prepare-commit-msg")
    if local_hook.exists() and os.access(local_hook, os.X_OK):
        subprocess.run([str(local_hook)] + sys.argv[1:])

    commit_msg_file = Path(sys.argv[1])

    if not is_in_rescale_repo():
        return

    try:
        with commit_msg_file.open("r+", encoding="utf-8") as f:
            lines = f.read().splitlines()

        if any(CO_AUTHOR_LINE in line for line in lines):
            return

        split_index = next(
            (i for i, line in enumerate(lines) if line.strip().startswith("#")),
            len(lines),
        )
        pre = lines[:split_index]
        post = lines[split_index:]

        new_lines = pre
        if not pre or pre[-1].strip() != "":
            new_lines.append("")
        new_lines.append("")
        new_lines.append(CO_AUTHOR_LINE)
        new_lines.append("")
        new_lines.extend(post)

        with commit_msg_file.open("w", encoding="utf-8") as f:
            f.write("\n".join(new_lines) + "\n")

    except Exception as e:
        print(f"Failed to update commit message: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
